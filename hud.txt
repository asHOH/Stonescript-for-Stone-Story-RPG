/*
Original code by JCBoorgo. He said it's cool to use this with a shout-out. Thanks!
Make a HUD and a healthbar
*/

/* ----------------- imports ---------------- */
var palette = import UserScript/palette
var s = import UserScript/s
var state_lister = import UserScript/state_lister
var printer = import UserScript/printer

/* ------------ public variables ------------ */
var show_hud_text = true // turn off to see bug reports clearly
var show_potion_button = false // to modify, use util.hud.show_potion_button = true in the level scripts.
var show_foe_full_name = false
var show_foe_distance = true
var show_hp_lost = true
var show_state_lister = true

var healthbar_ticks = 10
var show_healthbar = true
var show_enemy_healthbar = true

/* ------------ private variables ----------- */
var _hud_on = true
var _frame_per_loop = "?"
var _hp_lost_per_loop = "?"
var _perma_show_info = []

/* ----------------- colors ----------------- */
func _strategy_color(strategy)
  ?strategy = "speed_farming"
    return palette.green
  ?strategy = "walk" | strategy = "shovel" | strategy = "hatchet"
    return palette.gray
  ?strategy = "mmelee"
    return palette.orange
  ?strategy = "rranged"
    return palette.blue
  ?strategy = "melee"
    return palette.yellow
  ?strategy = "ranged"
    return palette.light_blue
  ?strategy = "SLAY"
    return palette.red
  return palette.white

func _eq_type_color(eq_type)
  ?eq_type = "walk" | eq_type = "shovel" | eq_type = "hatchet"
    return palette.gray
  ?eq_type = "mmelee"
    return palette.orange
  ?eq_type = "rranged"
    return palette.blue
  ?eq_type = "melee"
    return palette.yellow
  ?eq_type = "ranged"
    return palette.light_blue
  ?eq_type = "armor_gen"
    return palette.green
  ?eq_type = "blade!!" | eq_type = "bardiche!!"
    return palette.red
  return palette.white

func _info_color(info)
  var tp = Type(info)
  ?tp = "bool"
    ?info
      return palette.dark_green
    return palette.dark_red
  ?tp = "int" | tp = "float"
    ?info > 0
      return palette.light_gray
    return palette.dark_red
  ?tp = "null"
    return palette.dark_gray
  return palette.gray


/* ------------- initialization ------------- */
// run at loc.begin
func init()
  _hud_on = !(loc = "uulaa_shop" | loc = "undead_crypt_intro" | loc.isQuest)
  ?show_state_lister
    state_lister.on_begin_or_loop()

// run at loc.loop
func on_loop()
  _frame_per_loop = s.true_total_time / (s.loop_count - 1)
  _hp_lost_per_loop = s.hp_lost_total / (s.loop_count - 1)
  ?show_state_lister
    state_lister.on_begin_or_loop()

/* --------------- debug panel -------------- */
// input: array. Output is on the middle left of the screen. Should be called every frame.
func debug(infos)
  var indent = 0
  ?show_state_lister
    indent = 12
  for i = 0..infos.Count()-1
    var info = infos[i]
    printer.print(indent, 6 + i, _info_color(info), info)

// should be called only once
func perma_show(x, y, info)
  _perma_show_info.Add([x, y, _info_color(info), info])

/* -------------- draw function ------------- */
func draw(strategy, eq_type)
  ?!_hud_on
    return
  draw_hud(strategy, eq_type)
  draw_healthbar()
  ?show_state_lister
    state_lister.draw()
  for info : _perma_show_info
    printer.print(info[0], info[1], info[2], info[3])


/* ------------------- hud ------------------ */
func draw_hud(strategy, eq_type)
  draw.Bg(0, 1, palette.ddark_gray,screen.w, 5)

  var indent = 0
  ?show_potion_button
    indent = 9
  
  var line1 = []
  var line2 = []
  var line3 = []
  var line4 = []
  var line5 = []

  line1.Add([palette.yellow, loc.name+" "+loc.stars+"☆ ", 16])

  ?s.all_foe_count > 0
    ?show_foe_distance
      var foe_distance_text = foe.distance
      ?foe.distance > 999
        foe_distance_text = " ∞"
      line2.Add([palette.orange, s.all_foe_count, 3])
      line2.Add([palette.orange, "foes "])
      line2.Add([palette.orange, foe_distance_text, 3])
      line2.Add([palette.orange, "away"])

    ?show_foe_full_name
      var foe_infos = string.Break(foe, screen.w - 17 - indent)
      line1.Add([palette.red, foe_infos[0]])
      ?foe_infos.Count() > 1
        line2.Add([palette.red, " " + foe_infos[1]])
    :
      line1.Add([palette.red, string.Split(foe)[0]])
  : // no foe
    line2.Add([palette.orange, "", 16])

  line3.Add([_strategy_color(strategy), strategy, 16])
  line3.Add([_eq_type_color(eq_type), eq_type, 16])

  ?s.is_first_trial // no need to show hp lost or best time etc.
    line4.Add([palette.white, "Frames: ", 15])
    line4.Add([])
    line4.Add([palette.white, s.true_total_time, 5])
  :
    line4.Add([palette.white, "Avg./Best time: ", 16])
    line4.Add([palette.white, s.avg_time, 5])
    line4.Add([palette.white, "/"])
    ?s.new_best
      line4.Add([palette.green, s.best_time, 5])
      line4.Add([palette.white, "(-" + (s.initial_best_time - s.best_time) + ")"])
    :
      line4.Add([palette.white, s.best_time, 5])
    line5.Add([palette.cyan, "loop/now  time: ", 16])
    line5.Add([palette.cyan, _frame_per_loop, 5])
    line5.Add([palette.cyan, "/"])
    line5.Add([palette.cyan, s.total_time, 5])
    ?show_hp_lost
      line5.Add([palette.red, " Avg.HP lost/now: ", 16])
      line5.Add([palette.red, _hp_lost_per_loop, 2])
      line5.Add([palette.red, "/"])
      line5.Add([palette.red, math.Max(s.hp_last_loop - s.hp_, 0), 2])

  ?show_hud_text
    printer.print_lines(indent, 1, [line1, line2, line3, line4, line5])

/* ---------------- healthbar --------------- */
func draw_healthbar()
  ?show_healthbar
    var healthbar = s.create_healthbar("HP   [", healthbar_ticks, s.hp_, maxhp, palette.dark_red, palette.dark_green, palette.gray, "]")
    var armorbar = s.create_healthbar("Armor[", healthbar_ticks, s.armor_, maxhp, palette.blue, palette.violet, palette.gray, "]")
    printer.print_lines(0, screen.h - 3, [armorbar, healthbar])

  ?(!foe) | (!show_enemy_healthbar)
    return
  var enemy_healthbar_y = -4
  var enemy_healthbar_ticks = math.Max(2, s.floor(math.Log(foe.maxhp, 2)) - 1)
  var enemy_armorbar_ticks = math.Max(2, s.floor(math.Log(s.foe_maxarmor, 2)) - 1)
  var enemy_healthbar = s.create_healthbar("[", enemy_healthbar_ticks, foe.hp, foe.maxhp, palette.dark_red, palette.dark_green, palette.gray, "]")
  var enemy_armorbar = s.create_healthbar("[", enemy_armorbar_ticks, foe.armor, s.foe_maxarmor, palette.blue, palette.violet, palette.gray, "]")
  ?foe.armor > 0
    printer.print_lines_on_foe(0, enemy_healthbar_y - 1, [enemy_armorbar, enemy_healthbar])
  :
    printer.print_lines_on_foe(0, enemy_healthbar_y, [enemy_healthbar])
  