/*
Holds all possible equipment sets for fighting
*/

/* ----------------- imports ---------------- */
var s = import UserScript/s

/* ---------------- variables --------------- */
var element = "none" // target element of equipment
var eq_type = "none" // current type of equipment set
var left_hand = "" // current left hand equipment
var right_hand = "" // current right hand equipment
var moondial_time = 0

/* ----------------- shields ---------------- */
var compound_shield_regen = "compound shield *10 shiny"
var compound_shield_regen_armor = 14
var compound_shield_maxarmor = "compound shield *10 -shiny"
var compound_shield_maxarmor_armor = 35

var poison_shield_A = "poison shield 10* A"
var ice_shield_A = "ice shield 10* A"
var fire_shield_A = "fire shield 10* A"
var aether_shield_A = "aether shield 10* A"
var vigor_shield_A = "vigor shield 10* A"

var shield_ah = "vigor shield 10* ah" // heal when hit
var shield_ap = "poison shield 10* ap" // bonus damage when hit
var shield_af = "fire shield 10* af" // burning damage when hit
var shield_ai = "ice shield 10* ai" // slow when hit

var shield_dodge = "aether shield 10* A shiny"

/* ----------------- swords ----------------- */
var poison_sword = "poison sword 10* D -big shiny"
var ice_sword = "ice sword 10* D -big shiny"
var fire_sword = "fire sword 10* D -big shiny"
var aether_sword = "aether sword 10* D -big shiny"
var vigor_sword = "vigor sword 10* D -big shiny"

var poison_sword2 = "poison sword 10* D -big -shiny"
var ice_sword2 = "ice sword 10* D -big -shiny"
var fire_sword2 = "fire sword 10* D -big -shiny"
var aether_sword2 = "aether sword 10* D -big -shiny"
var vigor_sword2 = "vigor sword 10* D -big -shiny"

var sword_dL = "vigor sword 10* dL -big"
var sword_dP = "poison sword 10* dP -big"
var sword_dI = "ice sword 10* dI -big"
var sword_dF = "fire sword 10* dF -big"

var universal_sword = sword_dL // universal sword for when you don't have a good sword
var universal_sword2 = fire_sword // backup universal sword
var best_sword = fire_sword // best DPS sword
var best_sword2 = fire_sword2 // second best DPS sword

/* ----------------- hammers ---------------- */
var poison_hammer = "poison hammer 10* D"
var ice_hammer = "ice hammer 10* D"
var fire_hammer = "fire hammer 10* D"
var aether_hammer = "aether hammer 10* D"
var vigor_hammer = "vigor hammer 10* D"

var best_hammer = poison_hammer // best DPS hammer
var best_hammer2 = fire_hammer // second best DPS hammer

/* ----------------- others ----------------- */
var repeating_crossbow = "repeating crossbow 10*"
var aether_crossbow = "aether crossbow 10*"
var ice_crossbow = "ice crossbow 10*"
var wand_dI = "ice wand 10* dI"
var wand_dP = "poison wand 10* dP"
var vigor_wand = "vigor wand *10"
var aether_wand = "aether wand *10"

func on_start_frame()
  left_hand = ""
  right_hand = ""

func set_eq_type(type)
  eq_type = type

func L(equipment)
  ?equipment & !(string.Equals(equipment, right_hand))
    left_hand = equipment
  :?!(string.Equals(equipment, universal_sword))
    left_hand = universal_sword
  :
    left_hand = universal_sword2
  equipL @left_hand@
  return true


func R(equipment)
  ?equipment & !(string.Equals(equipment, left_hand))
    right_hand = equipment
  :?!(string.Equals(equipment, universal_sword))
    right_hand = universal_sword
  :
    right_hand = universal_sword2
  equipR @right_hand@
  return true


/* -------------- normal shield ------------- */
// shields are seldom used in combat (most used when there is no foe)
func R_shield_A()
  ?element = "poison"
    R(poison_shield_A)
  :?element = "fire"
    R(fire_shield_A)
  :
    R_shield_ah()
  return true

func R_compound_maxarmor()
  R(compound_shield_maxarmor)
  return true

func shield_maxarmor()
  set_eq_type("maxarmor")
  R_compound_maxarmor()
  L("quest")
  return true

func R_compound_regen()
  R(compound_shield_regen)
  return true

func shield_regen()
  set_eq_type("max_regen")
  R_compound_regen()
  L("quest")
  return true

func R_compound_auto(quest_equipped)
  ?s.armor_ < compound_shield_regen_armor | ((s.armor_ < compound_shield_regen_armor + 2) & quest_equipped)
    return R_compound_regen()
  :?s.armor_ <= compound_shield_maxarmor_armor | ((s.armor_ <= compound_shield_maxarmor_armor + 2) & quest_equipped)
    return R_compound_maxarmor()
  return false



/* -------------- debuff shield ------------- */
func R_shield_ah()
  return R(shield_ah)

func R_shield_ap()
  return R(shield_ap)

func R_shield_af()
  return R(shield_af)

func R_shield_ai()
  return R(shield_ai)


/* ---------------- dps sword --------------- */
func L_sword()
  ?element = "poison"
    return L(poison_sword)
  ?element = "ice"
    return L(ice_sword)
  ?element = "fire"
    return L(fire_sword)
  ?element = "aether"
    return L(aether_sword)
  ?element = "vigor"
    return L(vigor_sword)
  return L(best_sword)

func R_sword()
  ?element = "poison"
    return R(poison_sword)
  ?element = "ice"
    return R(ice_sword)
  ?element = "fire"
    return R(fire_sword)
  ?element = "aether"
    return R(aether_sword)
  ?element = "vigor"
    return R(vigor_sword)
  return R(best_sword)

func L_sword2()
  ?element = "poison"
    return L(poison_sword2)
  ?element = "ice"
    return L(ice_sword2)
  ?element = "fire"
    return L(fire_sword2)
  ?element = "aether"
    return L(aether_sword2)
  ?element = "vigor"
    return L(vigor_sword2)
  return L(best_sword2)

func R_sword2()
  ?element = "poison"
    return R(poison_sword2)
  ?element = "ice"
    return R(ice_sword2)
  ?element = "fire"
    return R(fire_sword2)
  ?element = "aether"
    return R(aether_sword2)
  ?element = "vigor"
    return R(vigor_sword2)
  return R(best_sword2)

/* -------------- debuff sword -------------- */
func L_sword_dL()
  return L(sword_dL)

func R_sword_dL()
  return R(sword_dL)

func L_sword_dF()
  return L(sword_dF)

func R_sword_dF()
  return R(sword_dF)

func L_sword_dP()
  return L(sword_dP)

func R_sword_dP()
  return R(sword_dP)

func L_sword_dI()
  return L(sword_dI)

func R_sword_dI()
  return R(sword_dI)

/* ---------------- hammer --------------- */
func L_hammer()
  ?element = "poison"
    return L(poison_hammer)
  ?element = "ice"
    return L(ice_hammer)
  ?element = "fire"
    return L(fire_hammer)
  ?element = "aether"
    return L(aether_hammer)
  ?element = "vigor"
    return L(vigor_hammer)
  return L_sword()

func R_hammer()
  ?element = "poison"
    return R(poison_hammer)
  ?element = "ice"
    return R(ice_hammer)
  ?element = "fire"
    return R(fire_hammer)
  ?element = "aether"
    return R(aether_hammer)
  ?element = "vigor"
    return R(vigor_hammer)
  return R_sword()

/* ---------------- crossbow --------------- */

func crossbow()
  ?element = "aether"
    equip @aether_crossbow@
  :?element = "ice"
    equip @ice_crossbow@
  :
    equip @repeating_crossbow@
  return true

/* ------------------ melee ----------------- */
// double melee
func mmelee()
  set_eq_type("mmelee")
  L_sword()
  R_sword2()
  return true

// double splashing melee
func mmelee_spl()
  rranged_spl() // big sword is bad...
  set_eq_type("mmelee_spl")
  return true

// piercing melee, i.e. Hammers (range = 5)
func melee_prc()
  set_eq_type("melee_prc")
  L_hammer()
  R_sword()
  return true

/* ----------------- ranged ----------------- */
// double ranged
func rranged()
  set_eq_type("rranged")
  // repeating crossbow is the best non-splashing ranged weapon in early game
  equip @repeating_crossbow@
  return true

// double splashing ranged
func rranged_spl()
  set_eq_type("rranged_spl") // under development
  L(vigor_wand)
  R(aether_wand)
  return true

/* ------------ specific weapons ------------ */
func blade()
  set_eq_type("blade!!")
  equip blade
  activate R
  return true

func blade_no_R()
  set_eq_type("blade")
  equip blade
  return true

func bardiche(use)
  equip bardiche *10
  ?use
    set_eq_type("bardiche!")
    ?s.can_activate_or_use_bardiche
      set_eq_type("bardiche!!")
      activate R
  :
    set_eq_type("bardiche")
  return true

func repeating()
  set_eq_type("repeating")
  equip @repeating_crossbow@
  return true

func pick_up()
  set_eq_type("pickup")
  equipL star
  equipR triskelion
  return true

func R_fire_talisman()
  set_eq_type("fire_talisman")
  equipR fire talisman
  activate R
  return true

func R_aether_talisman()
  set_eq_type("aether_talisman")
  equipR aether talisman
  activate R
  return true

/* ------------- dash and dodge ------------- */
func dashing()
  set_eq_type("dashing")
  equipR dashing shield
  L_sword()
  return true


func quarter_dash()
  set_eq_type("quarterstaff")
  equip quarterstaff
  activate R
  return true


func dodge()
  set_eq_type("dodge")
  equipL mind
  R(shield_dodge)
  return true


func R_cultist()
  R("cultist")
  return true

/* --------------- moondialing -------------- */
func moondialing()
  ?!(left_hand = "sword" & right_hand = "sword")
    return false

  set_eq_type("moondial")
  ?moondial_time % 3 = 0
    equipR @right_hand@
    equipL moondial
  :?moondial_time % 3 = 1
    equipR @left_hand@
    equipL moondial
  :
    equipR @right_hand@
    equipL @left_hand@
  moondial_time++
  return true
